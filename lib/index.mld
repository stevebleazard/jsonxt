{1 JSON parsers for files, strings and more}

Jsonxt provides a number JSON parsers and writers with
a focus on performance especially for the core file and
string functions

{2 API Documentation}
- {!module:Jsonxt} provides detailed module and function documentation

{2 Quick Start}
The following covers various use cases

{3 Convert a string and print the internal representation}
{[
let () =
  let json = Jsonxt.Basic.of_string "[1,2,3]" in
  print_endline (Jsonxt.Utilities.json_to_string_repr json);;
]}

{3 Reading a file and printing to stdout}
{[
let () = 
  let json = Jsonxt.Basic.of_file "test.json" in
  Jsonxt.Basic.to_channel_hum stdout json;;
]}

{3 Reading and writing a file using the monad functions}
{[
module IO = struct
  type 'a t = 'a

  let return v = v
  let (>>=) v f = f v
end

module JsonIO = Jsonxt.Basic_monad.Make(IO)
open IO

let _ =
  let ic = open_in "test.json" in
  let reader buf len = return (input ic buf 0 len) in
  let writer s = return (output_string stdout s) in
  JsonIO.read_json ~reader ()
  >>= function
    | Error err -> print_endline ("ERROR: " ^ err); return ()
    | Ok json -> JsonIO.write_json_hum ~writer json
;;
]}

{3 Yojson compatibility}
To use Jsonxt's Yojson compatibility module create a [yojson.ml] file in
the projects source directory with the following contents:
{[
include Jsonxt.Yojson
]}
Note that the compatibility is mostly a thin layer on top of Jsonxt.
In particular the error reporting by the utils module uses
the [Failure] exception rather than Yojson's specialist exceptions

{3 Using ppx\_yojson\_conv}

The following is an example using ppx\_yojson\_conv:
{[
module Item = struct
  type t = {
    str : string
  ; cost : float
  } [@@deriving yojson]
end

module Stock = struct
  type t = {
    desc : string
  ; inventory : int
  ; backorder : int option
  ; items : Item.t list
  } [@@deriving yojson]
end

let () =
  let item1 = { Item.str = "Store Baked Beans"; cost = 1.22 } in
  let item2 = { Item.str = "Branded Baked Beans"; cost = 1.47 } in
  let stock = { Stock.desc = "Beans"; inventory = 2; backorder = Some 3; items = [item1; item2] } in
  let json = Stock.yojson_of_t stock in
  print_endline (Yojson.Safe.show json);
  print_endline (Yojson.Safe.pretty_to_string json);
]}
